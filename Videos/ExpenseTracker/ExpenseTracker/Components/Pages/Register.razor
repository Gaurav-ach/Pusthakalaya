@page "/register"
@using ExpenseTracker.Components.Model
@using ExpenseTracker.Models
@inject UserService UserService
@inject NavigationManager NavigationManager
@using ExpenseTracker.Components.Layout
@layout FirstLayout

<h3>Register</h3>

<div>
    <input @bind="RegisterUsername" placeholder="Username" />
    <input @bind="RegisterPassword" placeholder="Password" type="password" />
    <input @bind="RegisterEmail" placeholder="Email" />

    <select @bind="SelectedCurrency">
        <option value="">-- Select Currency --</option>
        <option value="USD">USD</option>
        <option value="INR">INR</option>
        <option value="NPR">NPR</option>
        <option value="Other">Other</option>
    </select>

    <button @onclick="RegisterPage">Register</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string SelectedCurrency = "";
    private string Message = "";

    private List<User> Users = new();

    protected override void OnInitialized() => Users = UserService.LoadUsers();

    private void RegisterPage()
    {
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(SelectedCurrency))
        {
            Message = "Please select a currency.";
            return;
        }

        if (Users.Any(u => u.Username == RegisterUsername))
        {
            Message = "Username already exists.";
            return;
        }

        // Create new user and hash the password
        var newUser = new User
            {
                Username = RegisterUsername,
                Password = UserService.HashPassword(RegisterPassword),
                Email = RegisterEmail,
                PreferredCurrency = SelectedCurrency // Add selected currency
            };

        Users.Add(newUser);
        UserService.SaveUsers(Users);

        Message = "Registration successful. Redirecting to login...";
        Task.Delay(2000).ContinueWith(_ => NavigationManager.NavigateTo("/"));
    }
}

<style>
    div {
        margin: 0 auto;
        max-width: 500px;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        border: 1px solid #ddd;
    }

    h3 {
        text-align: center;
        color: #333;
    }

    input, select {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

        input:focus, select:focus {
            border-color: #4CAF50;
            outline: none;
        }

    button {
        width: 100%;
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #45a049;
        }

    p {
        text-align: center;
        font-weight: bold;
        color: red;
    }
</style>
