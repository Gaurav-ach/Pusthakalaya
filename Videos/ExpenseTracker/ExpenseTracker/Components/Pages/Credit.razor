@page "/credit"
@using ExpenseTracker.Components.Model
@using ExpenseTracker.Model
@inject UserService UserService

<h1>User Credits</h1>

<style>
    h1 {
        text-align: center;
        color: #4CAF50;
    }

    .stats-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .stat-box {
        flex: 1;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        background: #f9f9f9;
    }

        .stat-box h5 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }

        .stat-box p {
            font-size: 20px;
            font-weight: bold;
            color: #4CAF50;
        }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #45a049;
        }

    table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        table th, table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }

        table th {
            background-color: #f2f2f2;
        }

        table tbody tr:hover {
            background-color: #f1f1f1;
        }

    h2 {
        margin-top: 30px;
        color: #333;
    }

    .form-check {
        margin-bottom: 10px;
    }

    .form-check-label {
        margin-left: 5px;
    }

    .form-check-input {
        margin-left: 0;
    }

    .btn-danger {
        width: 100%;
        padding: 10px;
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-danger:hover {
            background-color: #e53935;
        }
</style>

<!-- Display Total Credit, Highest Credit, and Lowest Credit -->
<div class="stats-container">
    <div class="stat-box">
        <h5>Total Credit</h5>
        <p>@TotalCredit.ToString("C")</p>
    </div>
    <div class="stat-box">
        <h5>Highest Credit</h5>
        <p>@HighestCredit.ToString("C")</p>
    </div>
    <div class="stat-box">
        <h5>Lowest Credit</h5>
        <p>@LowestCredit.ToString("C")</p>
    </div>
</div>

<!-- Search Bar -->
<div class="form-group">
    <label for="search">Search Credits</label>
    <InputText id="search" @bind-Value="searchQuery" class="form-control" placeholder="Search by description" aria-label="Search Credits" />
</div>

<!-- Filters for Tag -->
<div class="form-group">
    <label for="tagFilter">Filter by Tags</label>
    <select id="tagFilter" class="form-control" @bind="selectedTag" aria-label="Filter by Tags">
        <option value="">All Tags</option>
        @foreach (var tag in defaultTags)
        {
            <option value="@tag">@tag</option>
        }
    </select>
</div>

<!-- Search and Filter Button -->
<div class="form-group">
    <button class="btn btn-primary" @onclick="OnSearchAndFilterClicked">Search and Filter</button>
</div>

<!-- Sorting Options -->
<div class="form-group">
    <label for="sortOptions">Sort by</label>
    <select id="sortOptions" class="form-control" @bind="sortOption" aria-label="Sort by">
        <option value="Date">Date</option>
        <option value="Debit">Debit</option>
        <option value="Credit">Credit</option>
    </select>
</div>

<!-- Transaction Table -->
<table class="table">
    <thead>
        <tr>
            <th>Transaction ID</th>
            <th>Main Balance</th>
            <th>Debit</th>
            <th>Credit</th>
            <th>Date</th>
            <th>Description</th>
            <th>Tags</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Id</td>
                <td>@MainBalance.ToString("C")</td>
                <td>@transaction.Debit</td>
                <td>@transaction.Credit</td>
                <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                <td>@transaction.Description</td>
                <td>@string.Join(", ", transaction.Tags)</td>
            </tr>
        }
    </tbody>
</table>

<h2>Add New Credit</h2>
<EditForm Model="newTransaction" OnValidSubmit="HandleTransactionSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="credit">Credit</label>
        <InputNumber id="credit" @bind-Value="newTransaction.Credit" class="form-control" aria-label="Credit Amount" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" aria-label="Credit Description" />
    </div>

    <div class="form-group">
        <label>Tags</label>
        @foreach (var tag in defaultTags)
        {
            <div class="form-check">
                <InputCheckbox id="@tag" @bind-Value="tagSelection[tag]" class="form-check-input" />
                <label for="@tag" class="form-check-label">@tag</label>
            </div>
        }
    </div>

    <div class="form-group">
        <InputText id="customTag" @bind-Value="customTag" class="form-control" placeholder="Add custom tag" aria-label="Add Custom Tag" />
        <button type="button" class="btn btn-primary" @onclick="AddCustomTag">Add Tag</button>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Add Credit</button>
    </div>
</EditForm>

@code {
    private AppData Data;
    private Transactions newTransaction = new Transactions();
    private List<string> defaultTags = new List<string> { "Monthly", "Rent", "Food", "Utilities", "Salary", "Entertainment" };
    private string searchQuery = string.Empty;
    private string selectedTag = string.Empty;
    private string sortOption = "Date";
    private string customTag = string.Empty;

    private List<Transactions> filteredTransactions = new List<Transactions>();
    private Dictionary<string, bool> tagSelection = new Dictionary<string, bool>();
    private decimal MainBalance => Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);
    private decimal TotalCredit => Data.Transactions.Where(t => t.Type == "Credit").Sum(t => t.Credit);
    private decimal HighestCredit => Data.Transactions.Where(t => t.Type == "Credit").DefaultIfEmpty().Max(t => t?.Credit ?? 0);
    private decimal LowestCredit => Data.Transactions.Where(t => t.Type == "Credit").DefaultIfEmpty().Min(t => t?.Credit ?? 0);

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();

        foreach (var tag in defaultTags)
        {
            tagSelection[tag] = false;
        }

        FilterAndSortTransactions();
    }

    private void FilterAndSortTransactions()
    {
        filteredTransactions = UserService.FilterTransactions(Data.Transactions, searchQuery, "Credit", selectedTag, sortOption);
    }

    private void HandleTransactionSubmit()
    {
        newTransaction.Id = Data.Transactions.Count + 1;
        newTransaction.Date = DateTime.Now;
        newTransaction.Type = "Credit";

        newTransaction.Tags = tagSelection.Where(kv => kv.Value).Select(kv => kv.Key).ToList();

        Data.Transactions.Add(newTransaction);
        UserService.SaveData(Data);

        newTransaction = new Transactions();
        foreach (var tag in defaultTags)
        {
            tagSelection[tag] = false;
        }

        FilterAndSortTransactions();
    }

    private void AddCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(customTag) && !defaultTags.Contains(customTag))
        {
            defaultTags.Add(customTag);
            tagSelection[customTag] = true;
            customTag = string.Empty;
        }
    }

    private void OnSearchAndFilterClicked()
    {
        FilterAndSortTransactions();
    }
}
