// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String    @db.VarChar(50)
  lastName         String    @db.VarChar(50)
  name             String?
  userProfileImage String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Payment          Payment[]
}

model Requiter {
  id                   String     @id @default(uuid())
  email                String     @unique
  password             String
  firstName            String     @db.VarChar(50)
  lastName             String     @db.VarChar(50)
  name                 String?
  role                 role       @default(REQUITER)
  requiterProfileImage String?
  contactNumber        String?    @db.VarChar(50)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  Business             Business[]
}

model Business {
  id         String     @id @default(uuid())
  name       String     @db.VarChar(100)
  about      String     @db.Text
  address    String     @db.VarChar(255)
  category   String     @db.VarChar(100)
  images     ImageUrl[]
  requiter   Requiter   @relation(fields: [requiterId], references: [id], onDelete: Cascade)
  requiterId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model ImageUrl {
  id         String    @id @default(uuid())
  url        String
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String?
}

enum role {
  REQUITER
  ADMIN
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  amount        Float
  paymentMethod PaymentType
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum PaymentType {
  credit
  WALLET
}
